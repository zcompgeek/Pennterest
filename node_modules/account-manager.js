var connectData = { 
		"hostname": "cis550zne.cbh8gmdnynf7.us-east-1.rds.amazonaws.com", 
		"user": "zne", 
		"password": "jacksonf", 
		"database": "PENNZNE" };

var oracle = require("oracle");
var crypto = require('crypto');


/* login validation methods */

exports.autoLogin = function(user, pass, callback)
{
	oracle.connect(connectData, function(err, connection) {
		if ( err ) {
			console.log(err);
		} else {
			var userExists = "(SELECT * FROM USERS WHERE email='"+user+"')";
			console.log(userExists);
			connection.execute(userExists, [],
					function(err, uresult){
				if(err) {console.log(err); }
				else{
					console.log(uresult);
					if (uresult){
						uresult.pass == pass ? callback(uresult) : callback(null);
					} 
					else{
						callback(null);
					}
				}
			});
		}
	});

};

exports.manualLogin = function(user, pass, callback)
{
	oracle.connect(connectData, function(err, connection) {
		if ( err ) {
			console.log(err);
		} else {
			var userExists = "(SELECT * FROM USERS WHERE email='"+user+"')";
			console.log(userExists);
			connection.execute(userExists, [],
					function(err, uresult){
				if(err) {console.log(err); }
				else {
					console.log(uresult[0]);
					if (uresult.length == 1){
						if (uresult[0].PASSWORD == "password") {
							console.log("Old password, need to fix...");
							fixUnhashedPassword(user, uresult[0].PASSWORD);
						}
						validatePassword(pass, uresult[0].PASSWORD, function(err, res) {
							if (res){ callback(null, uresult[0]); }
							else{ callback('invalid-password'); }
						});
					} 
					else{ callback(null); }
				}
			});
		}
	});
};

/* record insertion, update & deletion methods */

exports.addNewAccount = function(email, pass, fname, callback)
{
	oracle.connect(connectData, function(err, connection) {
		if ( err ) {
			console.log(err);
		} else {
			var userExists = "(SELECT * FROM USERS WHERE email='"+email+"')";
			console.log(userExists);
			connection.execute(userExists, [],
					function(err, uresult){
				if(err) {console.log(err); }
				else{
					console.log(uresult.length);
					if (uresult.length >= 1){
						callback('email-taken');
					} 
					else{
						saltAndHash( pass, 
								function(hash){
							var insertUser = "INSERT INTO USERS (userid, firstname, email, password) VALUES (seq_user_id.nextval, '"+fname+"', '"+email+"', '"+hash+"')";
							console.log(insertUser);
							connection.execute(insertUser, [],
									function(err, uresult){
								if(err) {console.log(err+" : "+uresult); callback(null); }
								else{console.log(uresult); callback('success');}
							});
						});
					}
				}
			});
		}
	});


};

/* private encryption & validation methods */

var generateSalt = function()
{
	var set = '0123456789abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQURSTUVWXYZ';
	var salt = '';
	for (var i = 0; i < 10; i++) {
		var p = Math.floor(Math.random() * set.length);
		salt += set[p];
	}
	return salt;
};

var md5 = function(str) {
	return crypto.createHash('md5').update(str).digest('hex');
};

var saltAndHash = function(pass, callback)
{
	var salt = generateSalt();
	callback(salt + md5(pass + salt));
};

var validatePassword = function(plainPass, hashedPass, callback)
{
	var salt = hashedPass.substr(0, 10);
	var validHash = salt + md5(plainPass + salt);
	callback(null, hashedPass === validHash);
};

var fixUnhashedPassword = function(email, pass)
{
	oracle.connect(connectData, function(err, connection) {
		if ( err ) {
			console.log(err);
		} else {
			var salt = generateSalt();
			var hashedPass = salt + md5(pass + salt);
			var updateUser = "UPDATE USERS SET PASSWORD ='"+hashedPass+"' WHERE email ='"+email+"'";
			console.log(updateUser);
			connection.execute(updateUser, [], function(err, uresult){});
		}
	});
};